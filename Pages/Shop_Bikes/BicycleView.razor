@page "/bicycles"
@using System.Net.Http
@using System.Collections.Generic
@using System.Diagnostics;

@inject HttpClient HttpLib
@inject SweetAlertService Swal;
@inject IJSRuntime JSRuntime;

<div class="row row-height">
    <div class="col-3 left card card-body bg-light" style="max-height: 90%;">
        <h4>Filters</h4>
        <div class="card mb-1">
            <div class="card-header">
                Model Type
                <a href="" @onclick:preventDefault><span class="oi oi-plus float-right" aria-hidden="true"></span></a>
            </div>
            <div class="card-body">
                @foreach(var item in filter_modelTypes) {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="model-type" id="@item" value="@item" @onchange="eventArgs => { ModelClicked(item, eventArgs.Value); }">
                        <label class="form-check-label" for="model-type">
                            @item
                        </label>
                    </div>
                }

            </div>
        </div>

        <div class="card mb-1">
            <div class="card-header">
                Construction
                <a href="" @onclick:preventDefault><span class="oi oi-plus float-right" aria-hidden="true"></span></a>
            </div>
            <div class="card-body">
                @foreach(var item in filter_construction) {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="construction-type" id="item" value="@item" @onchange="eventArgs => { ConstructionClicked(item, eventArgs.Value); }">
                        <label class="form-check-label" for="construction-type">
                            @item
                        </label>
                    </div>
                }
            </div>
        </div>

        <div class="card mb-1">
            <div class="card-header">
                Color
                <a href="" @onclick:preventDefault><span class="oi oi-plus float-right" aria-hidden="true"></span></a>
            </div>
            <div class="card-body">
                @foreach(var item in all_Colorlists) {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="colorlist" id="item" value="@item" @onchange="eventArgs => { ColorlistClicked(item, eventArgs.Value); }">
                        <label class="form-check-label" for="construction-type">
                            @item[0]@item.Substring(1).ToLower()
                        </label>
                    </div>
                }
            </div>
        </div>

        <div class="card mb-1">
            <div class="card-header">
                Pricing
                <a href="" @onclick:preventDefault><span class="oi oi-plus float-right" aria-hidden="true"></span></a>
            </div>
            <div class="card-body">
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label>Min</label>
                        <input type="number" class="form-control price-box" id="priceMin" placeholder="$0" @bind="@min">
                    </div>

                    <div class="form-group col-md-6 text-right">
                        <label>Max</label>
                        <input type="number" class="form-control price-box" id="priceMax" placeholder="$1,000" @bind="@max">
                    </div>
                </div>
            </div>
        </div>

        <button class="btn btn-outline-secondary mb-1" @onclick="ClearFilters">Clear Filters</button>
        <button class="btn btn-outline-primary" @onclick="ApplyChanges">Apply Changes</button>

    </div>
    <div class="col-9 left card card-body bg-light" style="max-height: 90%">

        @if(bicycles == null) {
            <p>Loading bicycles...</p>
        } else {
            <div class="card-deck">
                @foreach (var bike in bicycles) {
                    <div class="card m-1" style="min-width: 18rem; max-width:33.0%;">
                        <div class="card-header">
                            <h5 class="card-title">@bike.Modeltype<span class="badge badge-pill badge-primary float-right">$@bike.Listprice</span></h5>
                        </div>
                        <div class="card-body">
                            <h6><span class="badge badge-pill badge-secondary">@bike.Construction</span> <span class="badge badge-pill badge-secondary" style="background-color: @((bike?.Paint?.Colorlist ?? "NONE"))">@((bike?.Paint?.Colorlist ?? "N/A"))</span> <span class="badge badge-pill badge-secondary">@bike.Framesize FRAMESIZE</span></h6>
                            @if (bike.Paint.Colorlist.Equals("BLUE"))
                            {
                                <img src="images/Bicycles/Blue.jpeg" style="width:250px;height:150px;" /><br>
                            }
                            else if (bike.Paint.Colorlist.Equals("WHITE"))
                            {
                                <img src="images/Bicycles/White.jpg" style="width:250px;height:150px;" /><br>
                            }
                            else if (bike.Paint.Colorlist.Equals("GREEN"))
                            {
                                <img src="images/Bicycles/Green.jpeg" style="width:250px;height:150px;" /><br>
                            }
                            else if (bike.Paint.Colorlist.Equals("BLACK"))
                            {
                                <img src="images/Bicycles/Black_Blue.jpg" style="width:250px;height:150px;" /><br>
                            }
                            else if (bike.Paint.Colorlist.Equals("RED"))
                            {
                                <img src="images/Bicycles/Red.jpg" style="width:250px;height:150px;" /><br>
                            }
                            else if (bike.Paint.Colorlist.Equals("PURPLE"))
                            {
                                <img src="images/Bicycles/Pink.jpeg" style="width:250px;height:150px;" /><br>
                            }
                            else if (bike.Paint.Colorlist.Equals("ORANGE"))
                            {
                                <img src="images/Bicycles/Orange.jpg" style="width:250px;height:150px;" /><br>
                            }
                            else if (bike.Paint.Colorlist.Equals("YELLOW"))
                            {
                                <img src="images/Bicycles/Yellow.jpg" style="width:250px;height:150px;" /><br>
                            }
                            else if (bike.Paint.Colorlist.Equals("GREY"))
                            {
                                <img src="images/Bicycles/Grey.jpg" style="width:250px;height:150px;" /><br>
                            }
                            else if (bike.Paint.Colorlist.Equals("COPPER"))
                            {
                                <img src="images/Bicycles/Rust.jpeg" style="width:250px;height:150px;" /><br>
                            }
                            else
                            {
                                <img src="images/Bike.jpeg" style="width:250px;height:150px;" /><br>
                            }
                            <a href="#" class="btn btn-outline-primary mt-1">View</a>
                            <!-- For testing, I had to make it so I can add to the cart without logging in -->
                            <a href="#" class="btn btn-outline-success mt-1" @onclick:preventDefault @onclick='() => AddBikeToCart(bike)'>Add To Cart</a>
                        </div>
                    </div>
                }
            </div>
        }

        <div class="row justify-content-center">
            <div class="col-12 justify-content-center">
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(pageNumber == 1 ? "disabled" : null)"><a class="page-link " href="#/" @onclick="@(async () => await PreviousPage())" @onclick:preventDefault>Previous</a></li>
                        @for(int i = pageNumber - 2; i < pageNumber + 2; i++) {
                            int buttonNumber = i;
                            if(i < 1) continue;
                            @if(i == pageNumber) {
                                <li class="page-item active"><a class="page-link" href="#/" @onclick="@(async () => await ChoosePage(buttonNumber))" @onclick:preventDefault>@buttonNumber</a></li>
                            } else {
                                <li class="page-item @(bicycles == null || i >= pageNumber && bicycles.Count() < pageSize ? "disabled" : null)"><a class="page-link" href="#/" @onclick="@(async () => await ChoosePage(buttonNumber))" @onclick:preventDefault>@buttonNumber</a></li>
                            }
                        }

                        <li class="page-item @(bicycles == null || bicycles.Count() < pageSize ? "disabled" : null)"><a class="page-link" href="#/" @onclick="@(async () => await NextPage())" @onclick:preventDefault>Next</a></li>
                    </ul>
                </nav>

            </div>

        </div>


    </div>
</div>
<div class="row">
</div>

@code {

    Bicycle[] bicycles;
    List<String> filter_Colorlists = new List<String>();
    List<String> all_Colorlists = new List<String>();
    List<String> filter_ModelTypes = new List<String>();
    List<String> filter_Constructions = new List<String>();

    [CascadingParameter] private Task<AuthenticationState> authStateTask { get; set; }

    double min;
    double max;

    // a very bad way to collapse things
    public string collapse_model { get; set; } = "collapse";
    public string collapse_construction { get; set; } = "collapse";
    public string collapse_color { get; set; } = "collapse";

    private int pageSize = 20;
    private int pageNumber = 1;
    public List<String> filter_modelTypes = new List<string>() { "Hybrid", "Mountain", "Race", "Road", "Tour", "Track" };
    public List<String> filter_construction = new List<string>() { "Tig Welded", "Welded", "Bonded" };

    protected override async Task OnInitializedAsync() {

        var bicycleList = await HttpLib.GetFromJsonAsync<Bicycle[]>($"api/bicycles?pageNumber={pageNumber}&pageSize={pageSize}");
        var colorlists = await GetColorlists();
        var authState = await authStateTask;
        var user = authState.User;
        if(bicycleList.Any()) {
            bicycles = bicycleList;
        }
        if(colorlists.Any()) {
            @*foreach(String colorlist in colorlists) {
                    filter_colorLists.Add(colorlist);
                }*@
        all_Colorlists = new List<String>(colorlists);
    }
    if(await localStore.ContainKeyAsync(user.Identity.Name)) {
        var json = await localStore.GetItemAsStringAsync(user.Identity.Name);
        UserContainer = JsonConvert.DeserializeObject<StateContainer>(json);
    }
}


private async Task<List<String>> GetColorlists() {
    var apiRoute = $"api/paints/list";
    return await HttpLib.GetFromJsonAsync<List<String>>(apiRoute);
}


private async Task<Bicycle[]> Paginate() {
    var apiRoute = $"api/bicycles?pageNumber={pageNumber}&pageSize={pageSize}";

    if(filter_Constructions.Count > 0) {
        apiRoute = QueryHelpers.AddQueryString(apiRoute, "construction", BuildQueryString(filter_Constructions));
    }

    if(filter_ModelTypes.Count > 0) {
        apiRoute = QueryHelpers.AddQueryString(apiRoute, "modeltype", BuildQueryString(filter_ModelTypes));
    }

    if(filter_Colorlists.Count > 0) {
        apiRoute = QueryHelpers.AddQueryString(apiRoute, "paint", BuildQueryString(filter_Colorlists));
    }
    if(QueryPrices(min, max, out String priceQuery) && priceQuery != "") {
        apiRoute += $"&{priceQuery}";
    }
    return await HttpLib.GetFromJsonAsync<Bicycle[]>(apiRoute);
}

public async Task PreviousPage() {

    pageNumber--;

    if(pageNumber <= 0)
        pageNumber = 1;

    bicycles = await Paginate();
}

public async Task NextPage() {
    pageNumber++;

    Math.Clamp(pageNumber, 1, 99);

    bicycles = await Paginate();
}

public async Task ChoosePage(int pageClick) {
    pageNumber = pageClick;
    bicycles = await Paginate();
}

public async Task ApplyChanges() {
    pageNumber = 1;
    bicycles = await Paginate();
}

public async Task ClearFilters() {
    await JSRuntime.InvokeVoidAsync("uncheckBoxes");
    await JSRuntime.InvokeVoidAsync("clearPriceValues");
    filter_Constructions.Clear();
    filter_ModelTypes.Clear();
    min = 0;
    max = 0;
    pageNumber = 1;
    pageSize = 15;
    StateHasChanged();
    bicycles = await Paginate();
}

public async void AddBikeToCart(Bicycle bicycle) {

    var authState = await authStateTask;
    var user = authState.User;

    if(user.Identity.IsAuthenticated) {


        if(!UserContainer.CartBikes.Contains(bicycle)) {
            UserContainer.AddBicycle(bicycle);
            await localStore.SetItemAsync<StateContainer>(user.Identity.Name, UserContainer);
            await Swal.FireAsync("", "Added to cart!", SweetAlertIcon.Success);
        } else {
            await Swal.FireAsync("", "Already in cart!", SweetAlertIcon.Warning);
        }
    } else {
        await Swal.FireAsync("", "Please log in to add to your cart.", SweetAlertIcon.Error);
    }
}

///checkbox handlers

void ModelClicked(String modelType, object checkedModel) {

    if((bool)checkedModel) {
        if(!filter_ModelTypes.Contains(modelType)) {
            filter_ModelTypes.Add(modelType);
        }
    } else {
        if(filter_ModelTypes.Contains(modelType)) {
            filter_ModelTypes.Remove(modelType);
        }
    }
}

void ConstructionClicked(String constructionType, object checkedConstruction) {
    if((bool)checkedConstruction) {
        if(!filter_Constructions.Contains(constructionType)) {
            filter_Constructions.Add(constructionType);
        }
    } else {
        if(filter_Constructions.Contains(constructionType)) {
            filter_Constructions.Remove(constructionType);
        }
    }
}

void ColorlistClicked(String colorList, object checkedColorlist) {
    if((bool)checkedColorlist) {
        if(!filter_Colorlists.Contains(colorList)) {
            filter_Colorlists.Add(colorList);
        }
    } else {
        if(filter_Colorlists.Contains(colorList)) {
            filter_Colorlists.Remove(colorList);
        }
    }
}

bool QueryPrices(double min, double max, out String qString) {
    qString = "";

    if(min > max && max != 0) return false;
    if(min != 0) qString += $"listprice>{min}";
    if(min != 0 && max != 0) qString += $"&";
    if(max != 0) qString += $"listprice<{max}";
    return true;
}

String BuildQueryString(List<String> filterList) {
    String qString = "";
    if(filterList.Count == 1) {
        qString = $"{filterList[0]}";
    } else {
        qString = $"{filterList[0]}";
        for(int i = 1; i < filterList.Count; i++) {
            qString += $"|{filterList[i]}";
        }
    }
    return qString;
}



}
