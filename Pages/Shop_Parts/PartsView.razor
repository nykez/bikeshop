@page "/parts"
@using System.Net.Http
@using System.Collections.Generic
@using System.Diagnostics;
@inject HttpClient HttpLib
@inject SweetAlertService Swal;
@inject IJSRuntime JSRuntime;

<div class="row row-height" style="max-height: 90%;">
    <div class="col-3 card card-body bg-light" style="max-height: 90%;">
        <h4>Filters</h4>
        <div class="card mb-1">
            <div class="card-header">
                Category
                <a href="" @onclick:preventDefault ><span class="oi oi-plus float-right" aria-hidden="true"></span></a>
            </div>
            <div class="card-body">
                @foreach(var item in filter_modelTypes) {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="model-type" id="@item" value="@item" @onchange="eventArgs => { ModelClicked(item, eventArgs.Value); }">
                        <label class="form-check-label" for="model-type">
                            @item
                        </label>
                    </div>
                }

            </div>
        </div>

        <div class="card mb-1">
            <div class="card-header">
                Road Type
                <a href="" @onclick:preventDefault ><span class="oi oi-plus float-right" aria-hidden="true"></span></a>
            </div>
            <div class="card-body">
                @foreach(var item in filter_construction) {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="construction-type" id="item" value="@item" @onchange="eventArgs => { ConstructionClicked(item, eventArgs.Value); }">
                        <label class="form-check-label" for="construction-type">
                            @item
                        </label>
                    </div>
                }
            </div>
        </div>


        <div class="card mb-1">
            <div class="card-header">
                Pricing
                <a href="" @onclick:preventDefault ><span class="oi oi-plus float-right" aria-hidden="true"></span></a>
            </div>
            <div class="card-body">
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label>Min</label>
                        <input type="number" class="form-control" id="priceMin" placeholder="$0" @bind="@min">
                    </div>

                    <div class="form-group col-md-6 text-right">
                        <label>Max</label>
                        <input type="number" class="form-control" id="priceMax" placeholder="$1,000" @bind="@max">
                    </div>
                </div>

                <button type="button" class='btn btn-outline-success w-100' @onclick="ApplyChanges">Save Changes</button>

            </div>
        </div>

        <button class="btn btn-outline-secondary mb-1" @onclick="ClearFilters">Clear Filters</button>
        <button class="btn btn-outline-primary" @onclick="ApplyChanges">Apply Changes</button>

    </div>
    <div class="col-9 left card card-body bg-light" style="max-height: 90%">

        @if(components == null) {
            <p>Loading parts...</p>
        }
        else if (components != null && components.Count() == 0){
            <h5>No results.</h5>
        } else {
            <div class="card-deck">
                @foreach(var part in components) {
                    <div class="card m-1" style="min-width: 18rem; max-width:33.0%;">
                        <div class="card-header">
                            <h5 class="card-title">@part.Productint<span class="badge badge-pill badge-primary float-right">$@part.Listprice</span></h5>
                        </div>
                        <div class="card-body">
                            <h6><span class="badge badge-pill badge-secondary">@part.Category</span> <span class="badge badge-pill badge-secondary">@((part?.Road ?? "N/A"))</span> <span class="badge badge-pill badge-secondary">LENGTH @(part.Length == 0 ? "N/A" : @part.Length.ToString())</span></h6>
                            <p class="card-text">@part.Description</p>
                            <img src="images/PartDrawing.png" style="width:250px;height:150px;" /><br>
                            <a href="#" class="btn btn-outline-primary mt-1">View</a>
                            <a href="#" class="btn btn-outline-success mt-1" @onclick:preventDefault @onclick='() => AddComponentToCart(part)'>Add To Cart</a>
                        </div>
                    </div>
                }
            </div>
        }

        <div class="row justify-content-center">
            <div class="col-12 justify-content-center">
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(pageNumber == 1 ? "disabled" : null)"><a class="page-link " href="#/" @onclick="@(async () => await PreviousPage())" @onclick:preventDefault>Previous</a></li>
                        @for(int i = pageNumber - 2; i < pageNumber + 2; i++) {
                            int buttonNumber = i;
                            if(i < 1) continue;
                            @if(i == pageNumber) {
                                <li class="page-item active"><a class="page-link" href="#/" @onclick="@(async () => await ChoosePage(buttonNumber))" @onclick:preventDefault>@buttonNumber</a></li>
                            } else {
                                <li class="page-item @(components == null || i >= pageNumber && components.Count() < pageSize ? "disabled" : null)"><a class="page-link" href="#/" @onclick="@(async () => await ChoosePage(buttonNumber))" @onclick:preventDefault>@buttonNumber</a></li>
                            }
                        }
                        <li class="page-item @(components == null || components.Count() < pageSize ? "disabled" : null)"><a class="page-link" href="#/" @onclick="@(async () => await NextPage())" @onclick:preventDefault>Next</a></li>
                    </ul>
                </nav>

            </div>

        </div>


    </div>
</div>
<div class="row">
</div>

@code {

    public Component[] components;
    double min;
    double max;
    List<String> filter_ModelTypes = new List<String>();
    List<String> filter_Constructions = new List<String>();
    public int pageSize = 20;
    public int pageNumber = 1;
    public List<String> filter_modelTypes = new List<string>() { "Frame", "Headset", "Front deraileur", "Rear deraileur", "Brakes", "Crank", "Handlebar", "Chain"};
    public List<String> filter_construction = new List<string>() { "MTB", "Road" };
    [CascadingParameter] private Task<AuthenticationState> authStateTask { get; set; }

    protected override async Task OnInitializedAsync() {
        var authState = await authStateTask;
        var user = authState.User;
        var bicycleList = await HttpLib.GetFromJsonAsync<Component[]>($"api/component?pageNumber={pageNumber}&pageSize={pageSize}");

        if(bicycleList.Any()) {
            components = bicycleList;
        }
        if(await localStore.ContainKeyAsync(user.Identity.Name)) {
            var json = await localStore.GetItemAsStringAsync(user.Identity.Name);
            UserContainer = JsonConvert.DeserializeObject<StateContainer>(json);
        }

    }

    private async Task<Component[]> Paginate() {
        var apiRoute = $"api/component?pageNumber={pageNumber}&pageSize={pageSize}";

        if(filter_Constructions.Count > 0) {
            apiRoute = QueryHelpers.AddQueryString(apiRoute, "road", BuildQueryString(filter_Constructions));
        }

        if(filter_ModelTypes.Count > 0) {
            apiRoute = QueryHelpers.AddQueryString(apiRoute, "category", BuildQueryString(filter_ModelTypes));
        }

        if(QueryPrices(min, max, out String priceQuery) && priceQuery != "") {
            apiRoute += $"&{priceQuery}";
        }

        return await HttpLib.GetFromJsonAsync<Component[]>(apiRoute);
    }

    public async Task PreviousPage() {

        pageNumber--;

        if(pageNumber <= 0)
            pageNumber = 1;

        components = await Paginate();
    }

    public async Task NextPage() {
        pageNumber++;

        Math.Clamp(pageNumber, 1, 99);

        components = await Paginate();
    }

    public async Task ChoosePage(int pageClick) {
        pageNumber = pageClick;
        components = await Paginate();
    }

    public async Task ApplyChanges() {
        pageNumber = 1;
        components = await Paginate();
    }

    public async Task ClearFilters() {
        await JSRuntime.InvokeVoidAsync("uncheckBoxes");

        filter_Constructions.Clear();
        filter_ModelTypes.Clear();

        pageNumber = 1;
        pageSize = 15;
        StateHasChanged();
        components = await Paginate();
    }

    public async void AddComponentToCart(Component part) {

        var authState = await authStateTask;
        var user = authState.User;

        if(user.Identity.IsAuthenticated) {


            //if(!UserContainer.CartComponents.Contains(part)) {
                UserContainer.AddComponent(part);
                await localStore.SetItemAsync<StateContainer>(user.Identity.Name, UserContainer);
                await Swal.FireAsync("", "Added to cart!", SweetAlertIcon.Success);
@*            } else {
                await Swal.FireAsync("", "Already in cart!", SweetAlertIcon.Warning);
            }*@
        } else {
            await Swal.FireAsync("", "Please log in to add to your cart.", SweetAlertIcon.Error);
        }
    }

    ///checkbox handlers

    void ModelClicked(String modelType, object checkedModel) {

        if((bool)checkedModel) {
            if(!filter_ModelTypes.Contains(modelType)) {
                filter_ModelTypes.Add(modelType);
            }
        } else {
            if(filter_ModelTypes.Contains(modelType)) {
                filter_ModelTypes.Remove(modelType);
            }
        }
    }

    void ConstructionClicked(String constructionType, object checkedConstruction) {
        if((bool)checkedConstruction) {
            if(!filter_Constructions.Contains(constructionType)) {
                filter_Constructions.Add(constructionType);
            }
        } else {
            if(filter_Constructions.Contains(constructionType)) {
                filter_Constructions.Remove(constructionType);
            }
        }
    }

    String BuildQueryString(List<String> filterList) {
        String qString = "";
        if(filterList.Count == 1) {
            qString = $"{filterList[0]}";
        } else {
            qString = $"{filterList[0]}";
            for(int i = 1; i < filterList.Count; i++) {
                qString += $"|{filterList[i]}";
            }
        }
        return qString;
    }

    bool QueryPrices(double min, double max, out String qString) {
        qString = "";

        if(min > max && max != 0) return false;
        if(min != 0) qString += $"listprice>{min}";
        if(min != 0 && max != 0) qString += $"&";
        if(max != 0) qString += $"listprice<{max}";
        return true;
    }


}
